/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.RolePlant;

/**
 *
 * @author hrushithaputtala
 */
public class EnrollingtheEvent extends javax.swing.JPanel {

    /**
     * Creates new form EnrollingtheEvent
     */
    public EnrollingtheEvent() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RPEnrollingEventtbl = new javax.swing.JTable();
        RPEnrollEventEnrollBtn = new javax.swing.JButton();
        RPEnrollEventBackBtn = new javax.swing.JButton();

        jLabel1.setText("Enrolling The Event");

        RPEnrollingEventtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Event Location", "Date", "Available Seats", "Number of Seats"
            }
        ));
        jScrollPane1.setViewportView(RPEnrollingEventtbl);

        RPEnrollEventEnrollBtn.setText("Enroll");
        RPEnrollEventEnrollBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RPEnrollEventEnrollBtnActionPerformed(evt);
            }
        });

        RPEnrollEventBackBtn.setText("<< Back");
        RPEnrollEventBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RPEnrollEventBackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(RPEnrollEventBackBtn)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(RPEnrollEventEnrollBtn)
                        .addGap(123, 123, 123))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RPEnrollEventEnrollBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                .addComponent(RPEnrollEventBackBtn)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void RPEnrollEventEnrollBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RPEnrollEventEnrollBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblEvent.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row");
        }

        else{
            DefaultTableModel dtm = (DefaultTableModel) tblEvent.getModel();

            WorkRequest wr = (WorkRequest)dtm.getValueAt(selectedRow,0);

            for(WorkRequest wk : listOfReq){
                if (wk instanceof EventOrganizerWorkRequest){

                    if(((EventOrganizerWorkRequest) wk).getEventName().equals(wr.getMessage())){

                        if (((EventOrganizerWorkRequest) wk).getRemainingSeat() > 0){
                            int x = ((EventOrganizerWorkRequest) wk).getRemainingSeat() - 1;
                            ((EventOrganizerWorkRequest) wk).setRemainingSeat(x);
                            JOptionPane.showMessageDialog(null,"Successfully Registered");
                            populateQATable();

                            String mobNo = JOptionPane.showInputDialog("Enter Your Mobile Number to get details of the event");

                            if (mobNo != null){
                                sendSMS(mobNo, ((EventOrganizerWorkRequest) wk).getEventName(), ((EventOrganizerWorkRequest) wk).getEventDate());
                            }
                        }

                        else if (((EventOrganizerWorkRequest) wk).getRemainingSeat() < 1){
                            //int x = ((EventOrganizerWorkRequest) wk).getRemainingSeat() - 1;
                            //((EventOrganizerWorkRequest) wk).setRemainingSeat(x);
                            JOptionPane.showMessageDialog(null,"No Seats available");
                            // populateQATable();
                            // String mobNo = JOptionPane.showInputDialog("Enter Your Mobile Number to get details of the event");
                            //sendSMS(mobNo, ((EventOrganizerWorkRequest) wk).getEventName(), ((EventOrganizerWorkRequest) wk).getEventDate());
                        }

                    }
                }
            }

        }
    }//GEN-LAST:event_RPEnrollEventEnrollBtnActionPerformed

    private void RPEnrollEventBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RPEnrollEventBackBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_RPEnrollEventBackBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RPEnrollEventBackBtn;
    private javax.swing.JButton RPEnrollEventEnrollBtn;
    private javax.swing.JTable RPEnrollingEventtbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
